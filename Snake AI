import pygame
from random import randint,shuffle
import numpy as np
from math import pi, asin, sqrt, degrees, radians
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
import coremltools


class dir:
    left, right, up, down = range(4)
class NodeType:
    empty, snake_head, food, wall = range(4)

block_size = 10
screen_size = (50,50)
screen_color = (128, 128, 128)
wall_color = (0, 0, 0)
snake_color = (255, 0, 0)
food_color = (255, 0, 0)

columns, rows = screen_size[0], screen_size[1];

snake_initial_size = 1


class Snake:
    def __init__(self,x,y):
        self.x = x
        self.y = y

def getRepeats(input_file_name,output_file_name):
    with open(input_file_name,"r") as input_file, open(output_file_name,"w") as output_file:
        output_file.writelines(unique_everseen(input_file))

def getGrid():
    grid = [[0 for x in range(columns)] for y in range(rows)]

    for x in range(columns):
        grid[x][0] = NodeType.wall
        grid[x][columns-1] = NodeType.wall

    for y in range(rows):
        grid[0][y] = NodeType.wall
        grid[rows-1][y] = NodeType.wall

    return grid

def getSnake(x,y,grid):
    # Create initial snake
    snakeParts = []
    for i in range(snake_initial_size):
        segment = Snake(x+i, y)
        snakeParts.append(segment)

    grid[x][y] = NodeType.snake_head
    for i in range(1,len(snakeParts)):
        grid[snakeParts[i].x][snakeParts[i].y] = NodeType.wall

    return snakeParts

def growSnake(snakeParts,dir,grid):
    tail = snakeParts[-1]

    if dir == dir.right:   new_tail = Snake(tail.x-1, tail.y)
    elif dir == dir.left:  new_tail = Snake(tail.x+1, tail.y)
    elif dir == dir.up:    new_tail = Snake(tail.x, tail.y+1)
    else:                              new_tail = Snake(tail.x, tail.y-1)

    grid[new_tail.x][new_tail.y] = NodeType.wall

    snakeParts.append(new_tail)

    return snakeParts,grid

def drawNode(x,y,grid,screen):
    if grid[x][y] == NodeType.snake_head:  color = snake_color
    elif grid[x][y] == NodeType.food: color = food_color
    elif grid[x][y] == NodeType.wall: color = wall_color
    else:                             color = screen_color

    pygame.draw.rect(screen,color,pygame.Rect(x*block_size,y*block_size,block_size,block_size))

def gameOver(snakeParts,grid):
    head = snakeParts[0]

    return grid[head.x][head.y] == NodeType.wall\
        or head.x == 0\
        or head.y == 0\
        or head.x == columns-1\
        or head.y == rows-1

def Movement(snakeParts,dir,grid):
    head = snakeParts[0]
    tail = snakeParts.pop()
    grid[tail.x][tail.y] = NodeType.empty

    if dir == dir.up:
        tail.x = head.x
        tail.y = head.y - 1
    elif dir == dir.down:
        tail.x = head.x
        tail.y = head.y + 1
    elif dir == dir.left:
        tail.x = head.x - 1
        tail.y = head.y
    elif dir == dir.right:
        tail.x = head.x + 1
        tail.y = head.y

    snakeParts.insert(0,tail)

    if grid[tail.x][tail.y] != NodeType.food and grid[tail.x][tail.y] != NodeType.wall:
        grid[tail.x][tail.y] = NodeType.snake_head

    for i in range(1,len(snakeParts)):
        grid[snakeParts[i].x][snakeParts[i].y] = NodeType.wall

    return snakeParts

def Draw(grid,screen):
    for x in range(columns):
        for y in range(rows):
            drawNode(x,y, grid,screen)

def snakeScan(snakeParts,dir,grid): # Left, forward, right nodes of snake
    head = snakeParts[0]

    if dir == dir.right:
        return (grid[head.x][head.y-1],grid[head.x+1][head.y],grid[head.x][head.y+1])
    elif dir == dir.left:
        return (grid[head.x][head.y+1],grid[head.x-1][head.y],grid[head.x][head.y-1])
    elif dir == dir.up:
        return (grid[head.x-1][head.y],grid[head.x][head.y-1],grid[head.x+1][head.y])
    else:
        return (grid[head.x+1][head.y],grid[head.x][head.y+1],grid[head.x-1][head.y])

def checkSurroundings(left,forward,right):
    return (int(left == NodeType.wall),int(forward == NodeType.wall),int(right == NodeType.wall))

def isAnyNeighboringNodesBlocked(left,forward,right):
    return left == NodeType.wall or forward == NodeType.wall or right == NodeType.wall

def distanceToFood(snakeParts,food_position):
    head = snakeParts[0]

    food_x,food_y = food_position

    base = abs(food_x - head.x)
    perpendicular = abs(food_y - head.y)

    hypotenuse = sqrt(base**2 + perpendicular**2)
    return hypotenuse

def angleToFood(snakeParts,food_position,absolute_dir):
    head = snakeParts[0]

    food_x,food_y = food_position

    base = food_x - head.x
    perpendicular = food_y - head.y

    hypotenuse = sqrt(base**2 + perpendicular**2)+0.00001

    angle = degrees(asin(perpendicular/hypotenuse))%90

    if absolute_dir == dir.right:
        if base >= 0 and perpendicular <= 0:   angle = angle + 0
        elif base <= 0 and perpendicular <= 0: angle = angle + 90
        elif base <= 0 and perpendicular >= 0: angle = angle + 90
        else:                                  angle = angle + 0
    elif absolute_dir == dir.up:
        if base >= 0 and perpendicular <= 0:   angle = angle + 0
        elif base <= 0 and perpendicular <= 0: angle = angle + 0
        elif base <= 0 and perpendicular >= 0: angle = angle + 90
        else:                                  angle = angle + 90
    elif absolute_dir == dir.left:
        if base >= 0 and perpendicular <= 0:   angle = angle + 90
        elif base <= 0 and perpendicular <= 0: angle = angle + 0
        elif base <= 0 and perpendicular >= 0: angle = angle + 0
        else:                                  angle = angle + 90
    else:
        if base >= 0 and perpendicular <= 0:   angle = angle + 90
        elif base <= 0 and perpendicular <= 0: angle = angle + 90
        elif base <= 0 and perpendicular >= 0: angle = angle + 0
        else:                                  angle = angle + 0

    return radians(angle-90)/(pi/2)

def neuralInputs(snakeParts,grid,absolute_dir,food_position):
    return (checkSurroundings(*snakeScan(snakeParts,absolute_dir,grid)),
        angleToFood(snakeParts,food_position,absolute_dir))

def trainedModel(data, labels):

    model = Sequential()
    model.add(Dense(5,input_shape=(5,),activation="relu"))
    model.add(Dense(50,activation="relu"))
    model.add(Dense(50,activation="relu"))
    model.add(Dense(50,activation="relu"))
    model.add(Dense(1,activation="linear"))
    model.summary()
    model.compile(loss="mean_squared_error",optimizer="adam",metrics=["accuracy"])
    model.fit(data,labels,epochs=1)

    return model

def getRelativedir(current_dir,next_dir):

    if current_dir == dir.right:
        if next_dir == dir.up: return -1
        elif next_dir == dir.right: return 0
        else:                         return 1
    elif current_dir == dir.left:
        if next_dir == dir.down: return -1
        elif next_dir == dir.left: return 0
        else:                         return 1
    elif current_dir == dir.up:
        if next_dir == dir.left: return -1
        elif next_dir == dir.up: return 0
        else:                         return 1
    else:
        if next_dir == dir.right: return -1
        elif next_dir == dir.down: return 0
        else:                         return 1

def getPredicteddir(snakeParts,absolute_dir,model,inputs,grid,shuffle):
    head = snakeParts[0]

    relative_dirs = [-1,0,1]

    if shuffle == True:
        shuffle(relative_dirs)

    no_match_found = False
    for relative_dir in relative_dirs:
        prediction = model.predict(np.array([[inputs[0][0],inputs[0][1],inputs[0][2],inputs[1],relative_dir]]))
        if prediction > 0.9:
            break
        no_match_found = True

    if no_match_found == True and shuffle == True:
        for relative_dir in relative_dirs:
            prediction = model.predict(np.array([[inputs[0][0],inputs[0][1],inputs[0][2],inputs[1],relative_dir]]))
            if prediction >= 0:
                break

    if absolute_dir == dir.right:
        if relative_dir == -1:  return dir.up,relative_dir
        elif relative_dir == 0: return dir.right,relative_dir
        else:                         return dir.down,relative_dir
    elif absolute_dir == dir.left:
        if relative_dir == -1:  return dir.down,relative_dir
        elif relative_dir == 0: return dir.left,relative_dir
        else:                         return dir.up,relative_dir
    elif absolute_dir == dir.up:
        if relative_dir == -1:  return dir.left,relative_dir
        elif relative_dir == 0: return dir.up,relative_dir
        else:                         return dir.right,relative_dir
    else:
        if relative_dir == -1:  return dir.right,relative_dir
        elif relative_dir == 0: return dir.down,relative_dir
        else:                         return dir.left,relative_dir

def trainingData(target_output,inputs,snakeParts,relative_dir):

    return "\n{},{},{},{},{},{}".format(target_output,
                                     inputs[0][0],
                                     inputs[0][1],
                                     inputs[0][2],
                                     inputs[1],
                                     relative_dir)

def makeFood(grid):
    food_position = (randint(1, columns-snake_initial_size-1),randint(1, rows-snake_initial_size-1))
    grid[food_position[0]][food_position[1]] = NodeType.food
    return food_position

def onEat(snakeParts,grid):
    head = snakeParts[0]
    return grid[head.x][head.y] == NodeType.food

def resetStuckPosition():
    return [[0 for x in range(columns)] for y in range(rows)]

def runGame(death_count,font,model):

    score_count = 0
    grid = getGrid()
    dirs = [dir.right,dir.left,dir.up,dir.down]
    dir = dirs[randint(0,len(dirs)-1)]
    snake_position = (randint(1, columns-snake_initial_size-1),randint(1, rows-snake_initial_size-1))
    food_position = makeFood(grid)
    snakeParts = getSnake(snake_position[0],
                                snake_position[1],
                                grid)
    screen = pygame.display.set_mode((screen_size[0]*block_size,
                                      screen_size[1]*block_size))

    stuck_position = resetStuckPosition()

    while not gameOver(snakeParts,grid):

        game_stats_label = font.render("Deaths: {}           Score: {}".format(death_count,score_count), 1, (255,255,0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True


        screen.fill(screen_color)
        Draw(grid,screen)
        screen.blit(game_stats_label, (0, 0))
        pygame.display.flip()

        pygame.time.Clock().tick(999999999999)

        stuck_position[snakeParts[0].x][snakeParts[0].y] += 1
        shuffle = (stuck_position[snakeParts[0].x][snakeParts[0].y] > 5)
        
        current_dir = dir
        inputs = neuralInputs(snakeParts,grid,dir,food_position)
        dir,relative_dir = getPredicteddir(snakeParts,dir,model,inputs,grid,shuffle)

        previous_distance_between_snake_and_food = distanceToFood(snakeParts,food_position)
        snakeParts = Movement(snakeParts,dir,grid)
        current_distance_between_snake_and_food = distanceToFood(snakeParts,food_position)

   
        if gameOver(snakeParts,grid):                                                          target_output = -1
        elif current_distance_between_snake_and_food >= previous_distance_between_snake_and_food: target_output = 0
        else:                                                                                     target_output = 1

        output = trainingData(target_output,inputs,snakeParts,getRelativedir(current_dir,dir))
        file = open("/Users/Thomas/Desktop/Data.csv","a")
        file.write(output)
        file.close()

        if onEat(snakeParts,grid):
            score_count += 1
            food_position = makeFood(grid)
            shuffle = False
            stuck_position = resetStuckPosition()
            snakeParts,grid = growSnake(snakeParts,dir,grid)

# Load CSV file, indicate that the first column represents labels
data = pd.read_csv("/Users/Thomas/Desktop/Data.csv",usecols=[1,2,3,4,5])
labels = pd.read_csv("/Users/Thomas/Desktop/Data.csv",usecols=[0])
model = trainedModel(data,labels)

pygame.init()
font = pygame.font.SysFont("monospace", 25)

while True:
    death_count += 1
    runGame(death_count,font,model)
